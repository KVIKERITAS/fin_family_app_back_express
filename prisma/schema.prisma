// Relations example:
// userId String @db.ObjectId
// user User @relation(fields: [userId], references: [id])

// datas  data[]

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserRole {
  ADMIN
  USER
}

enum PaymentFrequency {
  yearly
  quarterly
  montly
}

enum Currency {
  EUR
  USD
  GBP
}

model User {
  id              String            @id @default(cuid())
  name            String
  email           String            @unique
  image           String?
  createAt        DateTime          @default(now())
  updateAt        DateTime          @default(now())
  hash            String
  role            UserRole          @default(USER)
  accounts        Account[]
  transactions    Transactions[]
  PersonalFinance PersonalFinance[]
  Comitments      Commitments[]
  Fire            Fire[]
  bucketList      bucketList[]
  newYearGoals    newYearGoals[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model PersonalFinance {
  id         String   @id @default(uuid())
  createAt   DateTime @default(now())
  updateAt   DateTime @default(now())
  balance    Decimal
  incomeSum  Decimal
  outcomeSum Decimal
  user       User     @relation(fields: [userId], references: [id])
  userId     String

  @@index([userId])
}

model Transactions {
  id       String   @id @default(uuid())
  createAt DateTime @default(now())
  updateAt DateTime @default(now())
  sum      Decimal
  type     String
  category String
  user     User     @relation(fields: [userId], references: [id])
  userId   String

  @@index([userId])
}

// model Suitcase {
//   PersonalFinance PersonalFinance
//   Commitments Commitments
// }

model Commitments {
  id        String           @id @default(uuid())
  type      String
  name      String
  start     DateTime
  end       DateTime
  fee_type  PaymentFrequency
  fee       Decimal
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id])
  userId    String

  @@index([userId])
}

model Fire {
  id               String             @id @default(uuid())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  user             User               @relation(fields: [userId], references: [id])
  userId           String
  toHave           toHave[]
  retirementIncome retirementIncome[]
  Lifestyle        Lifestyle[]

  @@index([userId])
}

model toHave {
  id             String   @id @default(uuid())
  name           String
  initialPayment Decimal
  monthlyPayment Decimal
  monthlyCost    Decimal
  currency       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
  fire           Fire     @relation(fields: [fireId], references: [id])
  fireId         String

  @@index([fireId])
}

model retirementIncome {
  id               String   @id @default(uuid())
  incomeName       String
  incomePaymentSum Decimal
  incomeStartDate  DateTime
  currency         Currency
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())
  fire             Fire     @relation(fields: [fireId], references: [id])
  fireId           String

  @@index([fireId])
}

model Lifestyle {
  id          String   @id @default(uuid())
  name        String
  monthlyCost Decimal
  currency    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  fire        Fire     @relation(fields: [fireId], references: [id])
  fireId      String

  @@index([fireId])
}

model bucketList {
  id             String   @id @default(uuid())
  name           String
  estimated_Date DateTime
  cost           Decimal
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
  complited      Boolean
  user           User     @relation(fields: [userId], references: [id])
  userId         String

  @@index([userId])
}

model newYearGoals {
  id             String     @id @default(uuid())
  name           String
  estimated_Date DateTime
  cost           Decimal
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @default(now())
  completed      Boolean
  user           User       @relation(fields: [userId], references: [id])
  userId         String
  subGoals       subGoals[]

  @@index([userId])
}

model subGoals {
  id             String       @id @default(uuid())
  name           String
  estimated_Date DateTime
  cost           Decimal
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())
  complited      Boolean
  subgoal        newYearGoals @relation(fields: [newYearGoalsId], references: [id])
  newYearGoalsId String

  @@index([newYearGoalsId])
}
