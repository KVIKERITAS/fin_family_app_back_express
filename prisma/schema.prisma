// Relations example:
// userId String @db.ObjectId
// user User @relation(fields: [userId], references: [id])

// datas  data[]

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// TODO: check all enums
// TODO: move all enums to separate file
enum UserRole {
  ADMIN
  USER
}

// enum TransactionCategory {
//   salary
//   cash
//   gifts_donations
//   holiday
//   savings
//   healthcare
//   entertainment
//   clothing
//   home_maintenance
//   groceries
//   dining_out
//   transport
//   utilities
//   rent_morgage
//   loan
//   dept
//   insurance
//   subscription
//   other
// }

enum PaymentFrequency {
  yearly
  quarterly
  monthly
  one_payment
}

enum CommitmentType {
  debt
  lease
  insurance
  subscription
  other
}

enum Currency {
  EUR
  USD
  GBP
}

enum CashAssetCategory {
  savings
  checking
  cash
  emergency
  vacation
  other
}

enum EquityCategory {
  tech
  finance
  energy
  health
  consumer
  industrials
  e_commerce
  divident
  other
}

enum BondCategory {
  government
  corporate
  municipal
  junk
  other
}

enum RealEstateType {
  residential
  land
  commercial
  industrial
  other
}

enum MetalType {
  gold
  silver
  platinum
  palladium
  other
}

enum MetalState {
  metal
  paper
}

enum SDCType {
  equities
  bond_coupon
  crypto
}

enum UtilyType {
  water
  electricity
  gas
  internet
  television
  phone
  waste_disposal
  home_security
  maintenance
  other
}

enum WhoPaid {
  owner
  tenant
}

enum TransactionType {
  income
  expense
}

model User {
  id                  String                @id @default(cuid())
  auth0Id             String                @unique
  email               String                @unique
  name                String?
  currency            String?
  // id              String            @id @default(cuid())
  // name            String
  // email           String            @unique
  // image           String?
  create_at        DateTime          @default(now())
  update_at        DateTime          @default(now())
  // hash            String
  // role            UserRole          @default(USER)
  // accounts        Account[]
  transactions        Transactions[]
  // PersonalFinance PersonalFinance[]
  commitments      Commitments[]
  // Fire            Fire[]
  // bucketList      BucketList[]
  // newYearGoals    NewYearGoals[]
  // cashAsset       CashAsset[]
  // equitiesAsset   EquitiesAsset[]
  // bondAsset       BondAsset[]
  // realEstate      RealEstate[]
  // metals          Metals[]
  // crypto          Crypto[]
  transactionCategories TransactionCategory[]

  @@map("users")
}

// model Account {
//   id                String  @id @default(cuid())
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? @db.Text
//   access_token      String? @db.Text
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.Text
//   session_state     String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
//   @@index([userId])
// }

// // TODO: Question: why do we need personal finance table? should be enough to have transactions table
// model PersonalFinance {
//   id         String   @id @default(uuid())
//   createAt   DateTime @default(now())
//   updateAt   DateTime @default(now())
//   balance    Int // this should be calculated from transactions
//   incomeSum  Int // this should be calculated from transactions
//   outcomeSum Int // this should be calculated from transactions
//   user       User     @relation(fields: [userId], references: [id])
//   userId     String
//   @@index([userId])
// }

model Transactions {
  id                    String               @id @default(uuid())
  userId                String
  transactionCategory   TransactionCategory? @relation(fields: [transactionCategoryId], references: [id])
  transactionCategoryId String

  // category TransactionCategory
  User User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model TransactionCategory {
  id            String         @id @default(uuid())
  name          String
  icon          String
  type          TransactionType  
  userId        String
  transactionId String?
  User          User           @relation(fields: [userId], references: [id])
  Transactions  Transactions[]

  @@index([userId])
}
model Commitments {
  id               String           @id @default(uuid())
  type             CommitmentType
  name             String
  initial_payment  Float?
  commitment_start DateTime         @default(now())
  commitment_end   DateTime?
  // payment_date     DateTime         @default(now())
  // currency         Currency         @default(EUR)
  full_sum         Float?
  fee_type         PaymentFrequency
  fee              Float  
  interest_rate    Float?
  created_at       DateTime         @default(now())
  updated_at       DateTime         @default(now())
  user             User             @relation(fields: [userId], references: [id])
  userId           String

  @@index([userId])
}
// model Transactions {
//   id       String              @id @default(uuid())
//   // sum         Int
//   type     TransactionType
//   category TransactionCategory @relation(fields: [transactionCategoryId], references: [id])
//   // description String?
//   // currency    Currency            @default(EUR)

//   // createAt              DateTime @default(now())
//   // updateAt              DateTime @default(now())
//   user                  User   @relation(fields: [userId], references: [id])
//   userId                String
//   transactionCategoryId String

//   @@index([userId])
// }

// // model Suitcase {
// //   PersonalFinance PersonalFinance
// //   Commitments Commitments
// // }



// // TODO: Question: why do we need fire table? should be enough to have toHave, retirementIncome and lifestyle tables
// model Fire {
//   id               String             @id @default(uuid())
//   createdAt        DateTime           @default(now())
//   updatedAt        DateTime           @default(now())
//   user             User               @relation(fields: [userId], references: [id])
//   userId           String
//   toHave           ToHave[]
//   retirementIncome RetirementIncome[]
//   Lifestyle        Lifestyle[]

//   @@index([userId])
// }

// model ToHave {
//   id             String   @id @default(uuid())
//   name           String
//   initialPayment Int
//   monthlyPayment Int
//   monthlyCost    Int
//   price          Int
//   interesRate    Int
//   monthsNeeded   Int
//   currency       Currency @default(EUR)
//   createdAt      DateTime @default(now())
//   updatedAt      DateTime @default(now())
//   fire           Fire     @relation(fields: [fireId], references: [id])
//   fireId         String

//   @@index([fireId])
// }

// model RetirementIncome {
//   id          String   @id @default(uuid())
//   name        String
//   payment_sum Int
//   start_date  DateTime
//   currency    Currency @default(EUR)
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @default(now())
//   fire        Fire     @relation(fields: [fireId], references: [id])
//   fireId      String

//   @@index([fireId])
// }

// model Lifestyle {
//   id           String   @id @default(uuid())
//   name         String
//   monthly_cost Int
//   currency     Currency @default(EUR)
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @default(now())
//   fire         Fire     @relation(fields: [fireId], references: [id])
//   fireId       String

//   @@index([fireId])
// }

// model BucketList {
//   id             String   @id @default(uuid())
//   name           String
//   estimated_date DateTime
//   cost           Int
//   currency       Currency @default(EUR)
//   completed      Boolean  @default(false)
//   createdAt      DateTime @default(now())
//   updatedAt      DateTime @default(now())
//   user           User     @relation(fields: [userId], references: [id])
//   userId         String

//   @@index([userId])
// }

// model NewYearGoals {
//   id             String     @id @default(uuid())
//   name           String
//   estimated_date DateTime
//   cost           Int
//   curency        Currency   @default(EUR)
//   completed      Boolean    @default(false)
//   createdAt      DateTime   @default(now())
//   updatedAt      DateTime   @default(now())
//   user           User       @relation(fields: [userId], references: [id])
//   userId         String
//   subGoals       SubGoals[]

//   @@index([userId])
// }

// model SubGoals {
//   id             String       @id @default(uuid())
//   name           String
//   estimated_date DateTime
//   cost           Int
//   curency        Currency     @default(EUR)
//   completed      Boolean      @default(false)
//   createdAt      DateTime     @default(now())
//   updatedAt      DateTime     @default(now())
//   goal           NewYearGoals @relation(fields: [newYearGoalId], references: [id])
//   newYearGoalId  String

//   @@index([newYearGoalId])
// }

// model CashAsset {
//   id                        String            @id @default(uuid())
//   category                  CashAssetCategory
//   currency                  Currency          @default(EUR)
//   stored_place              String
//   interest_rate             Int
//   deposit_contract_end_date DateTime
//   amount                    Int
//   createdAt                 DateTime          @default(now())
//   updatedAt                 DateTime          @default(now())
//   user                      User              @relation(fields: [userId], references: [id])
//   userId                    String

//   @@index([userId])
// }

// model EquitiesAsset {
//   id                          String         @id @default(uuid())
//   category                    EquityCategory
//   stock_ticker                String
//   stock_ticker_logo           String? // TODO: this will neeed to be a file (link to google cloud storage or smthg?)
//   stored_place                String
//   stored_place_logo           String? // TODO: this will neeed to be a file (link to google cloud storage or smthg?)
//   initial_cost                Int
//   amount                      Int
//   currency                    Currency       @default(EUR)
//   transaction_cost_bought     Int
//   currency_exange_cost_bought Int
//   transaction_cost_sold       Int
//   currency_exange_cost_sold   Int
//   createdAt                   DateTime       @default(now())
//   updatedAt                   DateTime       @default(now())

//   user                      User                        @relation(fields: [userId], references: [id])
//   userId                    String
//   EquitiesDividentsPayments EquitiesDividentsPayments[]

//   @@index([userId])
// }

// model BondAsset {
//   id                          String                @id @default(uuid())
//   category                    BondCategory
//   bond_ticker                 String
//   bond_ticker_logo            String? // TODO: this will neeed to be a file (link to google cloud storage or smthg?)
//   stored_place                String
//   stored_place_logo           String? // TODO: this will neeed to be a file (link to google cloud storage or smthg?)
//   initial_cost                Int
//   amount                      Int
//   currency                    Currency              @default(EUR)
//   transaction_cost_bought     Int
//   currency_exange_cost_bought Int
//   transaction_cost_sold       Int
//   currency_exange_cost_sold   Int
//   createdAt                   DateTime              @default(now())
//   updatedAt                   DateTime              @default(now())
//   user                        User                  @relation(fields: [userId], references: [id])
//   userId                      String
//   BondCouponsPayments         BondCouponsPayments[]

//   @@index([userId])
// }

// model RealEstate {
//   id                         String             @id @default(uuid())
//   real_estate_type           RealEstateType
//   name                       String
//   address                    String
//   total_price                Int
//   currency                   Currency           @default(EUR)
//   current_price_estimation   Int
//   initial_cost_payed         Int
//   acquiring_real_estate_cost Int
//   real_estate_taxes          Int
//   transaction_cost_sold      Int
//   currency_exange_cost_sold  Int
//   createdAt                  DateTime           @default(now())
//   updatedAt                  DateTime           @default(now())
//   user                       User               @relation(fields: [userId], references: [id])
//   userId                     String
//   morgage                    Morgage[]
//   maintenanceCosts           MaintenanceCosts[]
//   rent                       Rent[]

//   @@index([userId])
// }

// model Morgage {
//   id                      String     @id @default(uuid())
//   morgageStartDate        DateTime
//   morgageEndDate          DateTime
//   morgageProvider         String
//   morgageSum              Int
// initial_payment ar dadet cia??
//   interstetOnMorgageTotal Int // TODO: question: should we have this field?
//   interstetChangeDate     DateTime
//   bankInterest            Int
//   euriborInterest         Int
//   morgageMonthlyPayments  Int
//   currency                Currency   @default(EUR)
//   createdAt               DateTime   @default(now())
//   updatedAt               DateTime   @default(now())
//   realEstate              RealEstate @relation(fields: [realEstateId], references: [id])
//   realEstateId            String

//   @@index([realEstateId])
// }

// model Metals {
//   id                          String     @id @default(uuid())
//   metal_type                  MetalType
//   metal_logo                  String? // TODO: this will neeed to be a file (link to google cloud storage or smthg?)
//   metal_state                 MetalState
//   stored_place                String
//   stored_place_logo           String? // TODO: this will neeed to be a file (link to google cloud storage or smthg?)
//   initial_cost                Int
//   currency                    Currency   @default(EUR)
//   transaction_cost_bought     Int
//   currency_exange_cost_bought Int
//   transaction_cost_sold       Int
//   currency_exange_cost_sold   Int
//   units                       Int
//   karats                      Int
//   createdAt                   DateTime   @default(now())
//   updatedAt                   DateTime   @default(now())
//   user                        User       @relation(fields: [userId], references: [id])
//   userId                      String

//   @@index([userId])
// }

// model Crypto {
//   id                          String                    @id @default(uuid())
//   crypto_ticker               String
//   crypto_ticker_logo          String? // TODO: this will neeed to be a file (link to google cloud storage or smthg?)
//   stored_place                String
//   stored_place_logo           String? // TODO: this will neeed to be a file (link to google cloud storage or smthg?)
//   initial_cost                Int
//   currency                    Currency                  @default(EUR)
//   transaction_cost_bought     Int
//   currency_exange_cost_bought Int
//   transaction_cost_sold       Int
//   currency_exange_cost_sold   Int
//   amount                      Int
//   createdAt                   DateTime                  @default(now())
//   updatedAt                   DateTime                  @default(now())
//   user                        User                      @relation(fields: [userId], references: [id])
//   userId                      String
//   CryptoDividentsPayments     CryptoDividentsPayments[]

//   @@index([userId])
// }

// model BondCouponsPayments {
//   id           String    @id @default(uuid())
//   payment_date DateTime
//   sum          Int
//   currency     Currency  @default(EUR)
//   createdAt    DateTime  @default(now())
//   updatedAt    DateTime  @default(now())
//   bond         BondAsset @relation(fields: [bondAssetId], references: [id])
//   bondAssetId  String

//   @@index([bondAssetId])
// }

// model EquitiesDividentsPayments {
//   id              String        @id @default(uuid())
//   payment_date    DateTime
//   sum             Int
//   currency        Currency      @default(EUR)
//   createdAt       DateTime      @default(now())
//   updatedAt       DateTime      @default(now())
//   equities        EquitiesAsset @relation(fields: [equitiesAssetId], references: [id])
//   equitiesAssetId String

//   @@index([equitiesAssetId])
// }

// model CryptoDividentsPayments {
//   id           String   @id @default(uuid())
//   payment_date DateTime
//   sum          Int
//   currency     Currency @default(EUR)
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @default(now())
//   cryptoId     String
//   Crypto       Crypto   @relation(fields: [cryptoId], references: [id])

//   @@index([cryptoId])
// }

// model MaintenanceCosts {
//   id           String     @id @default(uuid())
//   type         UtilyType
//   who_paid     WhoPaid
//   description  String
//   data         DateTime
//   cost         Int
//   currency     Currency   @default(EUR)
//   createdAt    DateTime   @default(now())
//   updatedAt    DateTime   @default(now())
//   realEstateId String
//   RealEstate   RealEstate @relation(fields: [realEstateId], references: [id])

//   @@index([realEstateId])
// }

// model Rent {
//   id               String     @id @default(uuid())
//   first_name       String
//   last_name        String
//   contact_ref      String
//   rent_start_date  DateTime
//   planned_end_date DateTime
//   rent_end_date    DateTime
//   rent_sum         Int
//   deposit_paid     Int
//   currency         Currency   @default(EUR)
//   createdAt        DateTime   @default(now())
//   updatedAt        DateTime   @default(now())
//   realEstateId     String
//   RealEstate       RealEstate @relation(fields: [realEstateId], references: [id])

//   @@index([realEstateId])
// }
